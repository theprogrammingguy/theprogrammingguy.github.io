<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Vladyslav Burakov]]></title>
    <link href="http://vladyslav.org/atom.xml" rel="self"/>
    <link href="http://vladyslav.org/"/>
    <updated>2015-03-06T23:58:19+02:00</updated>
    <id>http://vladyslav.org/</id>
    <author>
        <name><![CDATA[Vladyslav Burakov]]></name>
        
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Unavoidable mistakes]]></title>
        <link href="http://vladyslav.org/blog/2015/03/05/unavoidable-mistakes/"/>
        <updated>2015-03-05T21:39:54+02:00</updated>
        <id>http://vladyslav.org/blog/2015/03/05/unavoidable-mistakes</id>
        <content type="html"><![CDATA[<p>Hello!</p>

<p><a href="http://vladyslav.org/blog/2015/03/04/do-it-wrong/">Earlier</a> I mentioned two types of mistakes.</p>

<p>Some of them you do because of simple lack of knowledge. I <a href="http://vladyslav.org/blog/2015/03/04/do-it-wrong/">suggested</a> you not to worry about them.</p>

<p>Today I want to talk about second type of mistakes. You don&rsquo;t understand you&rsquo;ve done them and they somehow stay invisible to you for a certain period of time.</p>

<p>Have you ever made such mistakes? You cannot figure out why your code doesn&rsquo;t work. It seems to be correct, but you keep getting an error. You try debugging it, but it appears to be the perfect time for debugger to start fooling around, so it refuses to see your breakpoints.</p>

<p>That drives you crazy. You spend plenty of time just to find you&rsquo;ve done a really stupid mistake.</p>

<p>Does it sound familiar to you? Frankly, I made such mistake today.</p>

<p>These mistakes have an important property, which makes them different from the first type.</p>

<p><strong>They are unavoidable!</strong></p>

<p>It may or may not be obvious until you make it plain, but it&rsquo;s impossible to write code without bugs! Even carefully reviewing your changes won&rsquo;t help you much.</p>

<p>Are you still not convinced? Let me prove my point. Write a solution for the problem you can find further in this post. There is a single limitation: write it at once in a text editor without syntax highlighting and don&rsquo;t run it until you are sure you&rsquo;ve finished. If your program works correctly without making changes, that will be something really impressive!</p>

<p>However, it&rsquo;s not about writing a bug-free code. It is about accepting the fact most of our newly written code contains mistakes and dealing with it. It&rsquo;s something that proves the necessity of unit testing and need of reviewing pieces of another&rsquo;s writing.</p>

<p>That was a programming trivia for today.</p>

<h4>Solution of the day</h4>

<p>Inplace reverse a sentence containing english words and spaces between them.</p>

<p>Example:</p>

<ul>
<li>input &ldquo;I wish you a merry Christmas&rdquo;</li>
<li>output &ldquo;Christmas merry a you wish I&rdquo;</li>
</ul>


<p>Constrains: O(1) additional memory</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">inplaceReverse</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">reverse</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lower</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">upper</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">upper</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">upper</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">[</span><span class="n">upper</span><span class="o">]</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">reverse</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">lower</span><span class="o">,</span> <span class="n">upper</span><span class="o">);</span>
</span><span class='line'>            <span class="n">lower</span> <span class="o">=</span> <span class="n">upper</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">reverse</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">lower</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">reverse</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lower</span><span class="o">,</span> <span class="kt">int</span> <span class="n">upper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">lower</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">upper</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>        <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>        <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">ch</span><span class="o">;</span>
</span><span class='line'>        <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">j</span><span class="o">--;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>My <strong>inspiration share</strong> of today is ongoing <strong><em>Better Call Saul</em></strong> TV series. Check it out!</p>

<p>Thatâ€™s all, folks! See you tomorrow! And remember: what is love? Programming is our true love!</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Do it wrong!]]></title>
        <link href="http://vladyslav.org/blog/2015/03/04/do-it-wrong/"/>
        <updated>2015-03-04T22:47:02+02:00</updated>
        <id>http://vladyslav.org/blog/2015/03/04/do-it-wrong</id>
        <content type="html"><![CDATA[<p>Hi there!</p>

<p>I&rsquo;ve got a confession to make. I&rsquo;m not a native English speaker.</p>

<p>It may be obvious by the way I write. There might be a lot of mistakes in my writing, which I overlooked, although I&rsquo;m really pedantic when it comes to revising my work before publishing.</p>

<p>Some mistakes are there because I just didn&rsquo;t notice them. Others are because I don&rsquo;t have enough knowledge or practice and couldn&rsquo;t spot them even if I was pointed on the sentences in which they occurs.</p>

<p>Frankly speaking, I&rsquo;m not afraid of mistakes. And you shouldn&rsquo;t be too. They are an unavoidable aspect of learning process.</p>

<p>I&rsquo;ve found recently that while doing my daily routine I have epiphany moments when I suddenly realise I&rsquo;ve made a mistake in my English. These moments are usually happen when I see or hear the correct version of what I tried to say. Sometimes they happen without a reason.</p>

<p>Here is my point. If I hadn&rsquo;t done those mistakes, I wouldn&rsquo;t have had these moments of realization.</p>

<p>Obviously, you cannot choose between making or not making a mistake. However, you can choose between doing something wrong or not doing it at all.</p>

<p>My answer is <strong>do it wrong!</strong></p>

<p>Of course, you don&rsquo;t want to put your money or reputation on that. Just make sure you won&rsquo;t suffer in case of a failure.</p>

<p>If you think your speaking skills are not good enough for public speaking, practice on your friend, cat, dog, favorite toy or even in front of your webcam.</p>

<p>If you want to create a good game, but don&rsquo;t feel confident in your skills, create a bad one! Create ten bad games! Create a worstest game ever! It will be an incredibly useful experience.</p>

<p>Remember, at some moments of your learning process it&rsquo;s more helpful to <em>start doing</em> that to <em>keep studying</em>.</p>

<p>That was a programming trivia for today.</p>

<h4>Solution of the day</h4>

<p>Write a program that answers YES/NO search queries containing * placeholders.</p>

<p>Example: if the data you have is (hazem, ahmed, moustafa, fizo), then you should answer as follows for:</p>

<ul>
<li>ahmed: YES</li>
<li>m**stafa: YES</li>
<li>fizoo: NO</li>
<li>fizd: NO</li>
<li>*****: YES</li>
<li>****: YESâ€¨</li>
<li>**: NO</li>
</ul>


<p>Your program should be able to answer each search query in O(1)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlaceholderSearchSet</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">append</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">appendRecursively</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">appendRecursively</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">,</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">==</span> <span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">appendRecursively</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">appendRecursively</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">replaceWithPlaceholder</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">offset</span><span class="o">),</span>
</span><span class='line'>                    <span class="n">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">replaceWithPlaceholder</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">word</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="sc">&#39;*&#39;</span> <span class="o">+</span> <span class="n">word</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">contains</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Today&rsquo;s <strong>inspiration share</strong> is <strong><em>On Writing</em></strong> book by <em>Stephen King</em>.</p>

<p>Thatâ€™s all, folks! See you tomorrow! And remember: what is love? Programming is our true love!</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[The law of the universe]]></title>
        <link href="http://vladyslav.org/blog/2015/03/03/the-law-of-the-universe/"/>
        <updated>2015-03-03T22:49:51+02:00</updated>
        <id>http://vladyslav.org/blog/2015/03/03/the-law-of-the-universe</id>
        <content type="html"><![CDATA[<p>Welcome back!</p>

<p>Remember the <em>Second Law of Thermodynamics?</em></p>

<blockquote><p>The state of entropy of the entire universe, as a closed isolated system, will always increase over time.</p></blockquote>

<p><em>Entropy</em> is a measure of disorder. Imagine perfectly written code. All lines appears in their places. The arrangement is perfect. The entropy is incredibly low.</p>

<p>Now let&rsquo;s talk about program written by monkey. Well, code-monkey, if you wish. The program works somehow, but the code is such a mess it&rsquo;s a miracle it even compiles. You would never agree to add changes to this code. It will explode!</p>

<p>As you can tell, that was an example of a code with high entropy.</p>

<p>So how should we understand the law? What it means is each time you add new features to your project, the source code becomes more messed up <em>unless</em> you make an <strong><em>extra effort</em></strong> to <a href="http://vladyslav.org/blog/2015/03/02/kiss-is-your-way-to-success/">keep it simple</a>.</p>

<p>It&rsquo;s true! That&rsquo;s why we need to review our code on a regular basis, find better approaches to do what we&rsquo;ve done, refactor, improve it.</p>

<p>After all, if the entire universe obeys the law, why your code shouldn&rsquo;t?</p>

<p>Are you confused about me telling you to reduce the entropy of your code while the law says it&rsquo;s impossible? It would be impossible if your code was a <em>closed isolated system</em>. Here is the thing &ndash; when you put an effort into cleaning your code, the entropy of the universe increases more than entropy of your code decreases.</p>

<p>If you want to learn more about laws of the universe, I suggest you to read <strong><em>A Brief History of Time</em></strong> by <em>Stephen Hawking</em> &ndash; the <strong>inspiration share</strong> of today.</p>

<p>That was a programming trivia for today.</p>

<h4>Solution of the day</h4>

<p>You are given an unsorted sequence of integers &lsquo;a&rsquo;. Find the longest subsequence &lsquo;b&rsquo; such that elements of this subsequence are strictly increasing numbers. Elements in the subsequence &lsquo;b&rsquo; must appear in the same relative order as in the sequence &lsquo;a&rsquo;. You may assume that &lsquo;a&rsquo; can fit to the memory.</p>

<p>Example:</p>

<ul>
<li>input: a = [-1 2 100 100 101 3 4 5 -7]</li>
<li>output: b = [-1 2 3 4 5]</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">longestIncreasingSubsequence</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">h</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">h</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">h</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">dp</span><span class="o">[</span><span class="n">max</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">max</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">dp</span><span class="o">[</span><span class="n">max</span><span class="o">]];</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">max</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">b</span><span class="o">[</span><span class="n">dp</span><span class="o">[</span><span class="n">max</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">max</span><span class="o">];</span>
</span><span class='line'>        <span class="n">max</span> <span class="o">=</span> <span class="n">h</span><span class="o">[</span><span class="n">max</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time complexity is O(N ^ 2).</p>

<p>Wait a minute. Are you saying there is a faster solution? Let&rsquo;s see&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">longestIncreasingSubsequence</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">h</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">l</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="o">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">c</span><span class="o">[</span><span class="n">m</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="o">[</span><span class="n">c</span><span class="o">[</span><span class="n">m</span><span class="o">]]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">l</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">r</span> <span class="o">=</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="o">(</span><span class="n">r</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">?</span> <span class="n">c</span><span class="o">[</span><span class="n">r</span><span class="o">]</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">h</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">c</span><span class="o">[</span><span class="n">dp</span><span class="o">[</span><span class="n">k</span><span class="o">]]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">[</span><span class="n">c</span><span class="o">[</span><span class="n">dp</span><span class="o">[</span><span class="n">k</span><span class="o">]]])</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">c</span><span class="o">[</span><span class="n">dp</span><span class="o">[</span><span class="n">k</span><span class="o">]]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">dp</span><span class="o">[</span><span class="n">max</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">max</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">c</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">[</span><span class="n">c</span><span class="o">[</span><span class="mi">0</span><span class="o">]])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">c</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">dp</span><span class="o">[</span><span class="n">max</span><span class="o">]];</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">max</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">b</span><span class="o">[</span><span class="n">dp</span><span class="o">[</span><span class="n">max</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">max</span><span class="o">];</span>
</span><span class='line'>        <span class="n">max</span> <span class="o">=</span> <span class="n">h</span><span class="o">[</span><span class="n">max</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>How about that? Time complexity is now O(N log N). However, it&rsquo;s too hard to understand now.</p>

<p>Thatâ€™s all, folks! See you tomorrow! And remember: what is love? Programming is our true love!</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[KISS is your way to success]]></title>
        <link href="http://vladyslav.org/blog/2015/03/02/kiss-is-your-way-to-success/"/>
        <updated>2015-03-02T20:31:24+02:00</updated>
        <id>http://vladyslav.org/blog/2015/03/02/kiss-is-your-way-to-success</id>
        <content type="html"><![CDATA[<p>Want to write clean efficient code just like I do? Let me give you a KISS!</p>

<p>Don&rsquo;t be shy, come closer! I won&rsquo;t bite you.</p>

<p>The <em>KISS</em> stands for <em>&ldquo;Keep It Simple, Stupid!&rdquo;</em></p>

<p>What it basically means is that while making your code flexible and extensible don&rsquo;t forget to make it simple.</p>

<p>I&rsquo;d been thinking for a while about how to find the perfect complexity of my code to make it useful not only for concrete practical purpose, but also to cover all its possible usages in case of reusing it later. So a was searching the point when code becomes <em>complete</em>. When there is nothing to add internally.</p>

<p>What I found was that there is an <em>unlimited amount</em> of ways to make your code more flexible by providing additional complexity. But that is not what you want to do. The thing is to make it useful enough you don&rsquo;t need to add anything, but also whittle it down so much you cannot cut it any more.</p>

<p>Eventually, simplicity is a good thing. It&rsquo;s a key property which all pieces of large systems must have to allows it to be maintainable.</p>

<p>You should always keep the KISS principle in your mind to become a successive programmer.</p>

<p>That was a programming trivia for today.</p>

<h4>Solution of the day</h4>

<p>Given a string containing letters, digits and other characters, write a function to check palindrome for only letters and digits. The implementation need to be in-place, no extra memory is allowed.</p>

<p>For example:</p>

<ul>
<li>&ldquo;ABA&rdquo; is palindrome</li>
<li>&ldquo;A!#A&rdquo; is palindrome</li>
<li>&ldquo;A man, a plan, a canal, Panama!&rdquo; is palindrome</li>
</ul>


<p>My solution is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">counted</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">counted</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">j</span><span class="o">--;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">||</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">areSame</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">j</span><span class="o">--;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">counted</span><span class="o">(</span><span class="kt">char</span> <span class="n">ch</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">nc</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nc</span> <span class="o">&gt;=</span> <span class="sc">&#39;a&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">nc</span> <span class="o">&lt;=</span> <span class="sc">&#39;z&#39;</span> <span class="o">||</span> <span class="n">nc</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">nc</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">areSame</span><span class="o">(</span><span class="kt">char</span> <span class="n">ch1</span><span class="o">,</span> <span class="kt">char</span> <span class="n">ch2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">normalize</span><span class="o">(</span><span class="n">ch1</span><span class="o">)</span> <span class="o">==</span> <span class="n">normalize</span><span class="o">(</span><span class="n">ch2</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">char</span> <span class="nf">normalize</span><span class="o">(</span><span class="kt">char</span> <span class="n">ch</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Character</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Today&rsquo;s winner in <strong>inspiration share</strong> nomination is <strong><em>Friends</em></strong> sitcom. Check it out!</p>

<p>That&rsquo;s all, folks! See you tomorrow! And remember: what is love? Programming is our true love!</p>
]]></content>
    </entry>
    
</feed>
